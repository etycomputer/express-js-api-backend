openapi: 3.0.0
info:
  title: Objects API
  description: API for managing objects
  version: 1.0.0
servers:
  - url: http://localhost:3000
paths:
  /objects/{objectsId}:
    get:
      summary: Get a object by its ID
      security:
        - OAuth2: [read]
      parameters:
        - name: objectsId
          in: path
          description: ID of the object to retrieve
          required: true
          schema:
            type: integer
            minimum: 0
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Object'
    put:
      summary: Update a object by its ID
      security:
        - OAuth2: [write]
      parameters:
        - name: objectsId
          in: path
          description: ID of the object to update
          required: true
          schema:
            type: integer
            minimum: 0
      requestBody:
        description: Object object to be updated
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Object'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Object'
    patch:
      summary: Partially update a object by its ID
      security:
        - OAuth2: [write]
      parameters:
        - name: objectsId
          in: path
          description: ID of the object to update
          required: true
          schema:
            type: integer
            minimum: 0
      requestBody:
        description: Object object to be updated
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Object'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Object'
  /objects/count:
    get:
      summary: Get the total number of objects in the system
      security:
        - OAuth2: [read]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: integer
  /objects/type/{type}:
    get:
      summary: Get all objects with a given type
      security:
        - OAuth2: [read]
      parameters:
        - name: type
          in: path
          description: Type of objects to retrieve
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Object'
  /objects/hole/{holeId}:
    get:
      summary: Get all objects with a given holeId
      security:
        - OAuth2: [read]
      parameters:
        - name: holeId
          in: path
          description: HoleId of objects to retrieve
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Object'
  /markers/{markerId}:
    get:
      summary: Get a marker by its ID
      security:
        - OAuth2: [read]
      parameters:
        - in: path
          name: markerId
          description: ID of the marker to retrieve
          required: true
          schema:
            type: integer
            minimum: 0
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Marker'
        '404':
          description: Marker not found

    put:
      summary: Update a marker by its ID
      security:
        - OAuth2: [write]
      parameters:
        - in: path
          name: markerId
          description: ID of the marker to update
          required: true
          schema:
            type: integer
            minimum: 0
      requestBody:
        description: Updated marker object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Marker'
      responses:
        '204':
          description: No content
        '404':
          description: Marker not found

    patch:
      summary: Partially update a marker by its ID
      security:
        - OAuth2: [write]
      parameters:
        - in: path
          name: markerId
          description: ID of the marker to update
          required: true
          schema:
            type: integer
            minimum: 0
      requestBody:
        description: Partially updated marker object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Marker'
      responses:
        '204':
          description: No content
        '404':
          description: Marker not found
  /markers/serial/{serial}:
    get:
      summary: Get a marker by its serial
      security:
        - OAuth2: [read]
      parameters:
        - in: path
          name: serial
          description: Serial number of the marker to retrieve
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Marker'
        '404':
          description: Marker not found
  /markers/type/{type}:
    get:
      summary: Get all markers of a given type
      security:
        - OAuth2: [read]
      parameters:
        - in: path
          name: type
          description: Type of markers to retrieve
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Marker'
  /marker/hole/{holeId}:
    get:
        summary: Get all markers of a given holeId.
        parameters:
          - name: holeId
            in: path
            description: ID of the hole to retrieve markers for.
            required: true
            schema:
              type: integer
              minimum: 0
        responses:
          '200':
            description: List of markers for the given holeId.
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/Marker'
  /marker/address/{subnet}:
    get:
        summary: Get all markers of a given subnet address.
        security:
            - OAuth2: [read]
        parameters:
          - name: subnet
            in: path
            description: Subnet address to retrieve markers for.
            required: true
            schema:
              type: integer
              minimum: 0
        responses:
          '200':
            description: List of markers for the given subnet address.
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/Marker'
  /marker/address/{subnet}/{node}:
    get:
        summary: Get a marker with a given subnet and node address.
        security:
            - OAuth2: [read]
        parameters:
          - name: subnet
            in: path
            description: Subnet address of the marker to retrieve.
            required: true
            schema:
              type: integer
              minimum: 0
          - name: node
            in: path
            description: Node address of the marker to retrieve.
            required: true
            schema:
              type: integer
              minimum: 0
        responses:
          '200':
            description: The requested marker.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Marker'
  /marker:
    post:
        summary: Add a new marker.
        security:
            - OAuth2: [write]
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Marker'
        responses:
          '201':
            description: The newly created marker.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Marker'

    get:
        summary: Get all markers.
        security:
            - OAuth2: [read]
        responses:
          '200':
            description: List of all markers.
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/Marker'
  /markers/{markerId}/readings:
    get:
      summary: Get all readings for a specific Marker by its ID.
      security:
        - OAuth2: [read]
      parameters:
        - name: markerId
          in: path
          required: true
          description: ID of the Marker to retrieve readings for.
          schema:
            type: integer
            minimum: 0
        - name: startTimestamp
          in: query
          description: Start timestamp of the time range for the Marker readings to retrieve.
          schema:
            type: string
            format: date-time
        - name: endTimestamp
          in: query
          description: End timestamp of the time range for the Marker readings to retrieve.
          schema:
            type: string
            format: date-time
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 0
            maximum: 200
            default: 100
          description: The numbers of items to return
      responses:
        200:
          description: List of readings for the specified Marker.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/readings'
    post:
      summary: Add a new reading for a specific Marker by its ID.
      security:
        - OAuth2: [write]
      parameters:
        - name: markerId
          in: path
          required: true
          description: ID of the Marker to add a reading for.
          schema:
            type: integer
            minimum: 0
      requestBody:
        required: true
        description: JSON object containing the details of the new reading to add.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/readings'
      responses:
        201:
          description: New reading added successfully.
        400:
          description: Invalid request body. The request body should contain the details of the new reading.
  /markers/{markerId}/readings/count:
    get:
      summary: Get the total number of readings for a specific Marker by its ID.
      security:
          - OAuth2: [read]
      parameters:
        - name: markerId
          in: path
          required: true
          description: ID of the Marker to retrieve the total number of readings for.
          schema:
            type: integer
            minimum: 0
      responses:
        200:
          description: Total number of readings for the specified Marker.
          content:
            application/json:
              schema:
                type: integer
                minimum: 0
  /markers/{markerId}/readings/{readingId}:
    put:
      summary: Update a specific reading for a specific Marker by its ID and reading ID.
      security:
        - OAuth2: [write]
      parameters:
        - name: markerId
          in: path
          description: ID of the Marker to update.
          required: true
          schema:
            type: integer
            minimum: 0
        - name: readingId
          in: path
          description: ID of the Reading to update.
          required: true
          schema:
            type: integer
            minimum: 0
      requestBody:
        description: New properties of the Reading.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/readings'
      responses:
        200:
          description: Successful response.
        400:
          description: Invalid input data.
        404:
          description: Marker or Reading not found.

    delete:
      summary: Delete a specific reading for a specific Marker by its ID and reading ID.
      security:
        - OAuth2: [write]
      parameters:
        - name: markerId
          in: path
          description: ID of the Marker to delete Reading from.
          required: true
          schema:
            type: integer
            minimum: 0
        - name: readingId
          in: path
          description: ID of the Reading to delete.
          required: true
          schema:
            type: integer
            minimum: 0
      responses:
        204:
          description: Successful response.
        404:
          description: Marker or Reading not found.
components:
  schemas:
    Object:
      type: object
      properties:
        objectsId:
          type: integer
          minimum: 0
        serial:
          type: string
        holeId:
          type: integer
          minimum: -1
          default: -1
      required:
        - type
    Marker:
      type: object
      properties:
        markerId:
          type: integer
          minimum: 0
        subnet:
          type: integer
          minimum: 0
        node:
          type: integer
          minimum: 0
        installPosition :
          type: array
          items:
            type: object
            properties:
              x:
                type: number
                format: float
              y:
                type: number
                format: float
              z:
                type: number
                format: float
        activated:
          type: boolean
          default: false
        activationTime:
          type: string
          format: date-time
      required:
        - subnet
        - node
    Reading:
      type: object
      properties:
        readingId:
          type: integer
          minimum: 0
        timestamp:
          type: string
          format: date-time
        temperature:
          type: number
          format: float
        porePressure:
          type: number
          format: float
    readings:
      type: array
      items:
        type: object
        properties:
          readingId:
            type: integer
            minimum: 0
          timestamp:
            type: string
            format: date-time
          temperature:
            type: number
            format: float
          porePressure:
            type: number
            format: float
        required:
          - timestamp
  securitySchemes:
    OAuth2:
      type: oauth2
      flows:
        clientCredentials:
            tokenUrl: https://auth.example.com/token
            scopes:
                read: Read access to the API
                write: Write access to the API
