openapi: 3.0.0
info:
  description: API for managing objects
  title: Objects API
  version: 1.0.0
servers:
- url: http://localhost:3000
paths:
  /objects/{objectsId}:
    get:
      operationId: objectsObjectsIdGET
      parameters:
      - description: ID of the object to retrieve
        explode: false
        in: path
        name: objectsId
        required: true
        schema:
          minimum: 0
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Object'
          description: OK
      security:
      - OAuth2:
        - read
      summary: Get a object by its ID
      x-eov-operation-handler: controllers/DefaultController
    patch:
      operationId: objectsObjectsIdPATCH
      parameters:
      - description: ID of the object to update
        explode: false
        in: path
        name: objectsId
        required: true
        schema:
          minimum: 0
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Object'
        description: Object object to be updated
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Object'
          description: OK
      security:
      - OAuth2:
        - write
      summary: Partially update a object by its ID
      x-eov-operation-handler: controllers/DefaultController
    put:
      operationId: objectsObjectsIdPUT
      parameters:
      - description: ID of the object to update
        explode: false
        in: path
        name: objectsId
        required: true
        schema:
          minimum: 0
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Object'
        description: Object object to be updated
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Object'
          description: OK
      security:
      - OAuth2:
        - write
      summary: Update a object by its ID
      x-eov-operation-handler: controllers/DefaultController
  /objects/count:
    get:
      operationId: objectsCountGET
      responses:
        "200":
          content:
            application/json:
              schema:
                type: integer
          description: OK
      security:
      - OAuth2:
        - read
      summary: Get the total number of objects in the system
      x-eov-operation-handler: controllers/DefaultController
  /objects/type/{type}:
    get:
      operationId: objectsTypeTypeGET
      parameters:
      - description: Type of objects to retrieve
        explode: false
        in: path
        name: type
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Object'
                type: array
          description: OK
      security:
      - OAuth2:
        - read
      summary: Get all objects with a given type
      x-eov-operation-handler: controllers/DefaultController
  /objects/hole/{holeId}:
    get:
      operationId: objectsHoleHoleIdGET
      parameters:
      - description: HoleId of objects to retrieve
        explode: false
        in: path
        name: holeId
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Object'
                type: array
          description: OK
      security:
      - OAuth2:
        - read
      summary: Get all objects with a given holeId
      x-eov-operation-handler: controllers/DefaultController
  /markers/{markerId}:
    get:
      operationId: markersMarkerIdGET
      parameters:
      - description: ID of the marker to retrieve
        explode: false
        in: path
        name: markerId
        required: true
        schema:
          minimum: 0
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Marker'
          description: OK
        "404":
          description: Marker not found
      security:
      - OAuth2:
        - read
      summary: Get a marker by its ID
      x-eov-operation-handler: controllers/DefaultController
    patch:
      operationId: markersMarkerIdPATCH
      parameters:
      - description: ID of the marker to update
        explode: false
        in: path
        name: markerId
        required: true
        schema:
          minimum: 0
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Marker'
        description: Partially updated marker object
        required: true
      responses:
        "204":
          description: No content
        "404":
          description: Marker not found
      security:
      - OAuth2:
        - write
      summary: Partially update a marker by its ID
      x-eov-operation-handler: controllers/DefaultController
    put:
      operationId: markersMarkerIdPUT
      parameters:
      - description: ID of the marker to update
        explode: false
        in: path
        name: markerId
        required: true
        schema:
          minimum: 0
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Marker'
        description: Updated marker object
        required: true
      responses:
        "204":
          description: No content
        "404":
          description: Marker not found
      security:
      - OAuth2:
        - write
      summary: Update a marker by its ID
      x-eov-operation-handler: controllers/DefaultController
  /markers/serial/{serial}:
    get:
      operationId: markersSerialSerialGET
      parameters:
      - description: Serial number of the marker to retrieve
        explode: false
        in: path
        name: serial
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Marker'
          description: OK
        "404":
          description: Marker not found
      security:
      - OAuth2:
        - read
      summary: Get a marker by its serial
      x-eov-operation-handler: controllers/DefaultController
  /markers/type/{type}:
    get:
      operationId: markersTypeTypeGET
      parameters:
      - description: Type of markers to retrieve
        explode: false
        in: path
        name: type
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Marker'
                type: array
          description: OK
      security:
      - OAuth2:
        - read
      summary: Get all markers of a given type
      x-eov-operation-handler: controllers/DefaultController
  /marker/hole/{holeId}:
    get:
      operationId: markerHoleHoleIdGET
      parameters:
      - description: ID of the hole to retrieve markers for.
        explode: false
        in: path
        name: holeId
        required: true
        schema:
          minimum: 0
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Marker'
                type: array
          description: List of markers for the given holeId.
      summary: Get all markers of a given holeId.
      x-eov-operation-handler: controllers/DefaultController
  /marker/address/{subnet}:
    get:
      operationId: markerAddressSubnetGET
      parameters:
      - description: Subnet address to retrieve markers for.
        explode: false
        in: path
        name: subnet
        required: true
        schema:
          minimum: 0
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Marker'
                type: array
          description: List of markers for the given subnet address.
      security:
      - OAuth2:
        - read
      summary: Get all markers of a given subnet address.
      x-eov-operation-handler: controllers/DefaultController
  /marker/address/{subnet}/{node}:
    get:
      operationId: markerAddressSubnetNodeGET
      parameters:
      - description: Subnet address of the marker to retrieve.
        explode: false
        in: path
        name: subnet
        required: true
        schema:
          minimum: 0
          type: integer
        style: simple
      - description: Node address of the marker to retrieve.
        explode: false
        in: path
        name: node
        required: true
        schema:
          minimum: 0
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Marker'
          description: The requested marker.
      security:
      - OAuth2:
        - read
      summary: Get a marker with a given subnet and node address.
      x-eov-operation-handler: controllers/DefaultController
  /marker:
    get:
      operationId: markerGET
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Marker'
                type: array
          description: List of all markers.
      security:
      - OAuth2:
        - read
      summary: Get all markers.
      x-eov-operation-handler: controllers/DefaultController
    post:
      operationId: markerPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Marker'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Marker'
          description: The newly created marker.
      security:
      - OAuth2:
        - write
      summary: Add a new marker.
      x-eov-operation-handler: controllers/DefaultController
  /markers/{markerId}/readings:
    get:
      operationId: markersMarkerIdReadingsGET
      parameters:
      - description: ID of the Marker to retrieve readings for.
        explode: false
        in: path
        name: markerId
        required: true
        schema:
          minimum: 0
          type: integer
        style: simple
      - description: Start timestamp of the time range for the Marker readings to
          retrieve.
        explode: true
        in: query
        name: startTimestamp
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: End timestamp of the time range for the Marker readings to retrieve.
        explode: true
        in: query
        name: endTimestamp
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: The numbers of items to return
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 100
          maximum: 200
          minimum: 0
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/readings'
                type: array
          description: List of readings for the specified Marker.
      security:
      - OAuth2:
        - read
      summary: Get all readings for a specific Marker by its ID.
      x-eov-operation-handler: controllers/DefaultController
    post:
      operationId: markersMarkerIdReadingsPOST
      parameters:
      - description: ID of the Marker to add a reading for.
        explode: false
        in: path
        name: markerId
        required: true
        schema:
          minimum: 0
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/readings'
        description: JSON object containing the details of the new reading to add.
        required: true
      responses:
        "201":
          description: New reading added successfully.
        "400":
          description: Invalid request body. The request body should contain the details
            of the new reading.
      security:
      - OAuth2:
        - write
      summary: Add a new reading for a specific Marker by its ID.
      x-eov-operation-handler: controllers/DefaultController
  /markers/{markerId}/readings/count:
    get:
      operationId: markersMarkerIdReadingsCountGET
      parameters:
      - description: ID of the Marker to retrieve the total number of readings for.
        explode: false
        in: path
        name: markerId
        required: true
        schema:
          minimum: 0
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                minimum: 0
                type: integer
          description: Total number of readings for the specified Marker.
      security:
      - OAuth2:
        - read
      summary: Get the total number of readings for a specific Marker by its ID.
      x-eov-operation-handler: controllers/DefaultController
  /markers/{markerId}/readings/{readingId}:
    delete:
      operationId: markersMarkerIdReadingsReadingIdDELETE
      parameters:
      - description: ID of the Marker to delete Reading from.
        explode: false
        in: path
        name: markerId
        required: true
        schema:
          minimum: 0
          type: integer
        style: simple
      - description: ID of the Reading to delete.
        explode: false
        in: path
        name: readingId
        required: true
        schema:
          minimum: 0
          type: integer
        style: simple
      responses:
        "204":
          description: Successful response.
        "404":
          description: Marker or Reading not found.
      security:
      - OAuth2:
        - write
      summary: Delete a specific reading for a specific Marker by its ID and reading
        ID.
      x-eov-operation-handler: controllers/DefaultController
    put:
      operationId: markersMarkerIdReadingsReadingIdPUT
      parameters:
      - description: ID of the Marker to update.
        explode: false
        in: path
        name: markerId
        required: true
        schema:
          minimum: 0
          type: integer
        style: simple
      - description: ID of the Reading to update.
        explode: false
        in: path
        name: readingId
        required: true
        schema:
          minimum: 0
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/readings'
        description: New properties of the Reading.
        required: true
      responses:
        "200":
          description: Successful response.
        "400":
          description: Invalid input data.
        "404":
          description: Marker or Reading not found.
      security:
      - OAuth2:
        - write
      summary: Update a specific reading for a specific Marker by its ID and reading
        ID.
      x-eov-operation-handler: controllers/DefaultController
components:
  schemas:
    Object:
      example:
        serial: serial
        objectsId: 0
        holeId: 0
      properties:
        objectsId:
          minimum: 0
          type: integer
        serial:
          type: string
        holeId:
          default: -1
          minimum: -1
          type: integer
      required:
      - type
      type: object
    Marker:
      example:
        subnet: 0
        node: 0
        installPosition:
        - x: 5.962134
          "y": 5.637377
          z: 2.302136
        - x: 5.962134
          "y": 5.637377
          z: 2.302136
        activationTime: 2000-01-23T04:56:07.000+00:00
        markerId: 0
        activated: false
      properties:
        markerId:
          minimum: 0
          type: integer
        subnet:
          minimum: 0
          type: integer
        node:
          minimum: 0
          type: integer
        installPosition:
          items:
            $ref: '#/components/schemas/Marker_installPosition_inner'
          type: array
        activated:
          default: false
          type: boolean
        activationTime:
          format: date-time
          type: string
      required:
      - node
      - subnet
      type: object
    Reading:
      properties:
        readingId:
          minimum: 0
          type: integer
        timestamp:
          format: date-time
          type: string
        temperature:
          format: float
          type: number
        porePressure:
          format: float
          type: number
      type: object
    readings:
      items:
        $ref: '#/components/schemas/readings_inner'
      type: array
    Marker_installPosition_inner:
      example:
        x: 5.962134
        "y": 5.637377
        z: 2.302136
      properties:
        x:
          format: float
          type: number
        "y":
          format: float
          type: number
        z:
          format: float
          type: number
      type: object
    readings_inner:
      example:
        temperature: 6.0274563
        porePressure: 1.4658129
        readingId: 0
        timestamp: 2000-01-23T04:56:07.000+00:00
      properties:
        readingId:
          minimum: 0
          type: integer
        timestamp:
          format: date-time
          type: string
        temperature:
          format: float
          type: number
        porePressure:
          format: float
          type: number
      required:
      - timestamp
      type: object
  securitySchemes:
    OAuth2:
      flows:
        clientCredentials:
          scopes:
            read: Read access to the API
            write: Write access to the API
          tokenUrl: https://auth.example.com/token
      type: oauth2
