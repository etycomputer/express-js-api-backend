/* eslint-disable */
// tslint:disable
/**
 * Objects API
 * API for managing objects
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator+.
 * https://github.com/karlvr/openapi-generator-plus
 * Do not edit the class manually.
 */

import { Express } from "express";
// import passport from "passport";
import connectEnsureLogin from "connect-ensure-login";
import * as t from "./types";
import * as v from "../../validation";
// import { Api } from "../../models";

const ensureLoggedIn = connectEnsureLogin.ensureLoggedIn();

export default function (app: Express, impl: t.MarkersApi) {
  app.get("/markers/:markerId", ensureLoggedIn, function (req, res) {
    try {
      const __user = req.user;
      if (!__user) {
        res.status(401);
        res.send();
        return;
      }
      impl
        .getMarkers(
          v.parseInteger("params.markerId", req.params["markerId"]),
          __user
        )
        .then(function (response) {
          if (response.status === 200) {
            let body: any;
            try {
              body = v.modelApiMarkerToJson("response", response.body);
            } catch (error) {
              console.error(
                "Invalid response body in markers.getMarkers",
                error
              );
              res.status(500);
              res.send();
              return;
            }

            res.status(200);
            res.send(body);
            return;
          }
          if (response.status === 404) {
            res.status(404);
            res.send();
            return;
          }

          console.log("Unsupported response in markers.getMarkers", response);
          res.status(500);
          res.send();
        })
        .catch(function (error) {
          console.error(
            "Unexpected error in markers.getMarkers",
            error.stack || error
          );
          res.status(500);
          res.send();
        });
    } catch (error) {
      /* Catch validation errors */
      res.status(400);
      res.send(error);
    }
  });

  app.patch("/markers/:markerId", ensureLoggedIn, function (req, res) {
    try {
      const __user = req.user;
      if (!__user) {
        res.status(401);
        res.send();
        return;
      }
      function __body() {
        const __contentType = req.get("Content-Type");
        const __mimeType = __contentType
          ? __contentType.replace(/;.*/, "")
          : undefined;

        if (__mimeType === "application/json") {
          return v.modelApiMarkerFromJson("body", req.body);
        }
        console.error(`Invalid request content type: ${__contentType}`);
        throw new Error(`Invalid request content type: ${__contentType}`);
      }

      impl
        .patchMarkers(
          v.parseInteger("params.markerId", req.params["markerId"]),
          __body(),
          __user
        )
        .then(function (response) {
          if (response.status === 204) {
            res.status(204);
            res.send();
            return;
          }
          if (response.status === 404) {
            res.status(404);
            res.send();
            return;
          }

          console.log("Unsupported response in markers.patchMarkers", response);
          res.status(500);
          res.send();
        })
        .catch(function (error) {
          console.error(
            "Unexpected error in markers.patchMarkers",
            error.stack || error
          );
          res.status(500);
          res.send();
        });
    } catch (error) {
      /* Catch validation errors */
      res.status(400);
      res.send(error);
    }
  });

  app.get("/markers/:markerId/readings", ensureLoggedIn, function (req, res) {
    try {
      const __user = req.user;
      if (!__user) {
        res.status(401);
        res.send();
        return;
      }
      impl
        .getMarkersReadings(
          v.parseInteger("params.markerId", req.params["markerId"]),
          v.allowUndefined(v.parseDateTime)(
            "query.startTimestamp",
            req.query["startTimestamp"]
          ),
          v.allowUndefined(v.parseDateTime)(
            "query.endTimestamp",
            req.query["endTimestamp"]
          ),
          v.allowUndefined(v.parseInteger)("query.limit", req.query["limit"]),
          __user
        )
        .then(function (response) {
          if (response.status === 200) {
            let body: any;
            try {
              body = v.arrayToJson(v.arrayToJson(v.modelApiReading2ToJson))(
                "response",
                response.body
              );
            } catch (error) {
              console.error(
                "Invalid response body in markers.getMarkersReadings",
                error
              );
              res.status(500);
              res.send();
              return;
            }

            res.status(200);
            res.send(body);
            return;
          }

          console.log(
            "Unsupported response in markers.getMarkersReadings",
            response
          );
          res.status(500);
          res.send();
        })
        .catch(function (error) {
          console.error(
            "Unexpected error in markers.getMarkersReadings",
            error.stack || error
          );
          res.status(500);
          res.send();
        });
    } catch (error) {
      /* Catch validation errors */
      res.status(400);
      res.send(error);
    }
  });

  app.post("/markers/:markerId/readings", ensureLoggedIn, function (req, res) {
    try {
      const __user = req.user;
      if (!__user) {
        res.status(401);
        res.send();
        return;
      }
      function __body() {
        const __contentType = req.get("Content-Type");
        const __mimeType = __contentType
          ? __contentType.replace(/;.*/, "")
          : undefined;

        if (__mimeType === "application/json") {
          return v.modelApiReadingFromJson("body", req.body);
        }
        console.error(`Invalid request content type: ${__contentType}`);
        throw new Error(`Invalid request content type: ${__contentType}`);
      }

      impl
        .postMarkersReadings(
          v.parseInteger("params.markerId", req.params["markerId"]),
          __body(),
          __user
        )
        .then(function (response) {
          if (response.status === 201) {
            res.status(201);
            res.send();
            return;
          }
          if (response.status === 400) {
            res.status(400);
            res.send();
            return;
          }

          console.log(
            "Unsupported response in markers.postMarkersReadings",
            response
          );
          res.status(500);
          res.send();
        })
        .catch(function (error) {
          console.error(
            "Unexpected error in markers.postMarkersReadings",
            error.stack || error
          );
          res.status(500);
          res.send();
        });
    } catch (error) {
      /* Catch validation errors */
      res.status(400);
      res.send(error);
    }
  });

  app.delete(
    "/markers/:markerId/readings/:readingId",
    ensureLoggedIn,
    function (req, res) {
      try {
        const __user = req.user;
        if (!__user) {
          res.status(401);
          res.send();
          return;
        }
        impl
          .deleteMarkersReadings(
            v.parseInteger("params.markerId", req.params["markerId"]),
            v.parseInteger("params.readingId", req.params["readingId"]),
            __user
          )
          .then(function (response) {
            if (response.status === 204) {
              res.status(204);
              res.send();
              return;
            }
            if (response.status === 404) {
              res.status(404);
              res.send();
              return;
            }

            console.log(
              "Unsupported response in markers.deleteMarkersReadings",
              response
            );
            res.status(500);
            res.send();
          })
          .catch(function (error) {
            console.error(
              "Unexpected error in markers.deleteMarkersReadings",
              error.stack || error
            );
            res.status(500);
            res.send();
          });
      } catch (error) {
        /* Catch validation errors */
        res.status(400);
        res.send(error);
      }
    }
  );
}

