/* eslint-disable */
// tslint:disable
/**
 * Objects API
 * API for managing objects
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator+.
 * https://github.com/karlvr/openapi-generator-plus
 * Do not edit the class manually.
 */

import { Express } from 'express'
import { Api } from './models'

type FromJsonFunction<T> = (name: string, value: any) => T
type MapOf<T> = { [name: string]: T }

/**
 * A conditional type to convert an interface model to the equivalent JSON model.
 * We may represent dates as Date objects in our object model, but we must translate
 * them to strings for the JSON model.
 */
type ToJson<T> =
	T extends Date ? string
	: T extends object ? {
		[P in keyof T]: ToJson<T[P]>
	}
	: T extends (infer R)[] ? ToJson<R>[]
	: T

export function arrayFromJson<T>(next: FromJsonFunction<T>): FromJsonFunction<T[]> {
	return function(name: string, value: any) {
		if (typeof value !== 'object' || typeof value.length !== 'number') {
			throw `Invalid type for ${name}: expected array got ${typeof value}`
		}
	
		const result: T[] = []
		for (const el of value) {
			result.push(next(name, el))
		}
		return result
	}
}

export function arrayToJson<T>(next: FromJsonFunction<T>): FromJsonFunction<T[]> {
	return arrayFromJson(next)
}

export function mapFromJson<T>(next: FromJsonFunction<T>): FromJsonFunction<MapOf<T>> {
	return function(name: string, value: any) {
		if (typeof value !== 'object') {
			throw `Invalid type for ${name}: expected object got ${typeof value}`
		}
	
		const result: MapOf<T> = {}
		for (const key in value) {
			if (value.hasOwnProperty(key)) {
				result[key] = next(name, value[key])
			}
		}
		return result
	}
}

export function mapToJson<T>(next: FromJsonFunction<T>): FromJsonFunction<MapOf<T>> {
	return mapFromJson(next)
}

export function allowNull<T>(next: FromJsonFunction<T>): FromJsonFunction<T | null> {
	return function(name: string, value: any) {
		if (value === null) {
			return null
		}
		return next(name, value)
	}
}

export function allowUndefined<T>(next: FromJsonFunction<T>): FromJsonFunction<T | undefined> {
	return function(name: string, value: any) {
		if (value === undefined) {
			return undefined
		}
		return next(name, value)
	}
}

export function allowNullOrUndefined<T>(next: FromJsonFunction<T>): FromJsonFunction<T | null | undefined> {
	return function(name: string, value: any) {
		if (value === null) {
			return null
		}
		if (value === undefined) {
			return undefined
		}
		return next(name, value)
	}
}

export function unsupportedFromJson(name: string, value: any): unknown {
	if (value === undefined) {
		throw `Invalid type for ${name}: expected unknown got undefined`
	}
	return value
}

export function unsupportedToJson(name: string, value: unknown): any {
	return unsupportedFromJson(name, value)
}

export function parseUnsupported(name: string, value: any): unknown {
	if (value === undefined) {
		throw `Invalid value for ${name}: expected unknown got undefined`
	}
	return value
}

export function booleanFromJson(name: string, value: any): boolean {
	if (typeof value !== 'boolean') {
		throw `Invalid type for ${name}: expected boolean got ${typeof value}`
	}
	return value
}

export function booleanToJson(name: string, value: boolean): any {
	return booleanFromJson(name, value)
}

export function parseBoolean(name: string, value: any): boolean {
	if (value === 'true') {
		return true
	} else if (value === 'false') {
		return false
	} else {
		throw `Invalid value for ${name}: expected boolean got "${value}"`
	}
}

export function stringFromJson(name: string, value: any): string {
	if (typeof value !== 'string') {
		throw `Invalid type for ${name}: expected string got ${typeof value}`
	}
	return value
}

export function stringToJson(name: string, value: string): any {
	return stringFromJson(name, value)
}

export function binaryFromJson(name: string, value: any): Buffer {
	if (typeof value !== 'string') {
		throw `Invalid type for ${name}: expected string got ${typeof value}`
	}
	return new Buffer(value, 'base64')
}

export function binaryToJson(name: string, value: string | Buffer): string {
	if (typeof value === 'string') {
		return value
	} else {
		return value.toString('base64')
	}
}

export function parseString(name: string, value: any): string {
	if (value === undefined) {
		throw `Invalid value for ${name}: expected string got undefined`
	}
	if (typeof value === 'string') {
		return value
	}
	if (typeof value === 'object' && typeof value.length === 'number') {
		if (value.length > 0) {
			return value[0]
		}
	}

	throw `Invalid value for ${name}: expected string got ${typeof value}`
}

export function integerFromJson(name: string, value: any): number {
	if (typeof value !== 'number') {
		throw `Invalid type for ${name}: expected number got ${typeof value}`
	}
	if (isNaN(value)) {
		throw `Invalid NaN for ${name}`
	}
	if (Math.floor(value) !== value) {
		throw `Invalid value for ${name}: expected integer got "${value}"`
	}
	return value
}

export function integerToJson(name: string, value: number): any {
	return integerFromJson(name, value)
}

export function parseInteger(name: string, value: any): number {
	if (typeof value === 'object' && typeof value.length === 'number' && value.length > 0) {
		value = value[0]
	}
	if (typeof value === 'string') {
		if (value.indexOf('.') !== -1) {
			throw `Invalid value for ${name}: expected integer got "${value}"`
		}

		const result = parseInt(value, 10)
		if (isNaN(result)) {
			throw `Invalid value for ${name}: expected integer got "${value}"`
		}
		return result
	}
	throw `Invalid value for ${name}: expected integer got ${typeof value}`
}

export function numberFromJson(name: string, value: any): number {
	if (typeof value !== 'number') {
		throw `Invalid type for ${name}: expected number got ${typeof value}`
	}
	if (isNaN(value)) {
		throw `Invalid NaN for ${name}`
	}
	return value
}

export function numberToJson(name: string, value: number): any {
	return numberFromJson(name, value)
}

export function parseNumber(name: string, value: any): number {
	if (typeof value === 'object' && typeof value.length === 'number' && value.length > 0) {
		value = value[0]
	}
	if (typeof value === 'string') {
		const result = parseFloat(value)
		if (isNaN(result)) {
			throw `Invalid value for ${name}: expected float got "${value}"`
		}
		return result
	}
	throw `Invalid value for ${name}: expected number got ${typeof value}`
}

export function dateFromJson(name: string, value: any): string {
	if (typeof value !== 'string') {
		throw `Invalid type for ${name}: expected string got ${typeof value}`
	}
	if (!value.match(/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/)) {
		throw `Invalid value for ${name}: expected valid date string got "${value}"`
	}
	return value
}

export function parseDate(name: string, value: any): string {
	return dateFromJson(name, value)
}

export function dateToJson(name: string, value: string): string {
	return dateFromJson(name, value)
}

export function dateTimeFromJson(name: string, value: any): Date {
	if (typeof value !== 'string') {
		throw `Invalid type for ${name}: expected string got ${typeof value}`
	}
	if (!value.match(/^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}(:[0-9]{2}(\.[0-9]+)?)?(Z|(\+|-)[0-9]{2}(:?[0-9]{2})?)$/)) {
		throw `Invalid value for ${name}: expected valid datetime string got "${value}"`
	}
	return new Date(value)
}

export function parseDateTime(name: string, value: any): Date {
	return dateTimeFromJson(name, value)
}

export function dateTimeToJson(name: string, value: Date): string {
	if (typeof value !== 'object' || typeof value.toISOString !== 'function') {
		throw `Invalid type for ${name}: expected Date got ${typeof value}`
	}
	return value.toISOString()
}

export function timeFromJson(name: string, value: any): string {
	if (typeof value !== 'string') {
		throw `Invalid type for ${name}: expected string got ${typeof value}`
	}
	if (!value.match(/^[0-9]{2}:[0-9]{2}(:[0-9]{2}(\.[0-9]+)?)?$/)) {
		throw `Invalid value for ${name}: expected valid time string got "${value}"`
	}
	return value
}

export function parseTime(name: string, value: any): string {
	return timeFromJson(name, value)
}

export function timeToJson(name: string, value: string): string {
	return timeFromJson(name, value)
}

/* Model conversion functions */

const ApiApiKeyKeys: string[] = ['apiKey']

function modelApiApiKeyFromJsonContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.ApiKey {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiApiKeyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.ApiKey = {
		'apiKey': allowUndefined(stringFromJson)(`${name}.apiKey`, value['apiKey']),
	}

	return result
}

function modelApiApiKeyToJsonContent(name: string, value: Api.ApiKey, knownKeys: Record<string, boolean> = {}): ToJson<Api.ApiKey> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiApiKeyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToJson<Api.ApiKey> = {
		'apiKey': allowUndefined(stringToJson)(`${name}.apiKey`, value['apiKey']),
	}

	return result
}

export function modelApiApiKeyFromJson(name: string, value: any): Api.ApiKey {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.ApiKey = modelApiApiKeyFromJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.ApiKey: ${key}`)
		}
	}

	return result
}

export function modelApiApiKeyToJson(name: string, value: Api.ApiKey): ToJson<Api.ApiKey> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToJson<Api.ApiKey> = modelApiApiKeyToJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.ApiKey: ${key}`)
		}
	}

	return result
}

const ApiAuthCredentialsKeys: string[] = ['username', 'password']

function modelApiAuthCredentialsFromJsonContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.AuthCredentials {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAuthCredentialsKeys.forEach(k => knownKeys[k] = true)

	const result: Api.AuthCredentials = {
		'username': stringFromJson(`${name}.username`, value['username']),
		'password': stringFromJson(`${name}.password`, value['password']),
	}

	return result
}

function modelApiAuthCredentialsToJsonContent(name: string, value: Api.AuthCredentials, knownKeys: Record<string, boolean> = {}): ToJson<Api.AuthCredentials> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiAuthCredentialsKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToJson<Api.AuthCredentials> = {
		'username': stringToJson(`${name}.username`, value['username']),
		'password': stringToJson(`${name}.password`, value['password']),
	}

	return result
}

export function modelApiAuthCredentialsFromJson(name: string, value: any): Api.AuthCredentials {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.AuthCredentials = modelApiAuthCredentialsFromJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.AuthCredentials: ${key}`)
		}
	}

	return result
}

export function modelApiAuthCredentialsToJson(name: string, value: Api.AuthCredentials): ToJson<Api.AuthCredentials> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToJson<Api.AuthCredentials> = modelApiAuthCredentialsToJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.AuthCredentials: ${key}`)
		}
	}

	return result
}

const ApiErrorKeys: string[] = ['error']

function modelApiErrorFromJsonContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.Error {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiErrorKeys.forEach(k => knownKeys[k] = true)

	const result: Api.Error = {
		'error': allowUndefined(stringFromJson)(`${name}.error`, value['error']),
	}

	return result
}

function modelApiErrorToJsonContent(name: string, value: Api.Error, knownKeys: Record<string, boolean> = {}): ToJson<Api.Error> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiErrorKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToJson<Api.Error> = {
		'error': allowUndefined(stringToJson)(`${name}.error`, value['error']),
	}

	return result
}

export function modelApiErrorFromJson(name: string, value: any): Api.Error {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.Error = modelApiErrorFromJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.Error: ${key}`)
		}
	}

	return result
}

export function modelApiErrorToJson(name: string, value: Api.Error): ToJson<Api.Error> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToJson<Api.Error> = modelApiErrorToJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.Error: ${key}`)
		}
	}

	return result
}

const ApiMarkerKeys: string[] = ['markerId', 'subnet', 'node', 'installPosition', 'activated', 'activationTime']

function modelApiMarkerFromJsonContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.Marker {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiMarkerKeys.forEach(k => knownKeys[k] = true)

	const result: Api.Marker = {
		'markerId': allowUndefined(integerFromJson)(`${name}.markerId`, value['markerId']),
		'subnet': integerFromJson(`${name}.subnet`, value['subnet']),
		'node': integerFromJson(`${name}.node`, value['node']),
		'installPosition': allowUndefined(modelApiMarkerInstallPositionFromJson)(`${name}.installPosition`, value['installPosition']),
		'activated': allowUndefined(booleanFromJson)(`${name}.activated`, value['activated']),
		'activationTime': allowUndefined(dateTimeFromJson)(`${name}.activationTime`, value['activationTime']),
	}

	return result
}

function modelApiMarkerToJsonContent(name: string, value: Api.Marker, knownKeys: Record<string, boolean> = {}): ToJson<Api.Marker> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiMarkerKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToJson<Api.Marker> = {
		'markerId': allowUndefined(integerToJson)(`${name}.markerId`, value['markerId']),
		'subnet': integerToJson(`${name}.subnet`, value['subnet']),
		'node': integerToJson(`${name}.node`, value['node']),
		'installPosition': allowUndefined(modelApiMarkerInstallPositionToJson)(`${name}.installPosition`, value['installPosition']),
		'activated': allowUndefined(booleanToJson)(`${name}.activated`, value['activated']),
		'activationTime': allowUndefined(dateTimeToJson)(`${name}.activationTime`, value['activationTime']),
	}

	return result
}

export function modelApiMarkerFromJson(name: string, value: any): Api.Marker {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.Marker = modelApiMarkerFromJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.Marker: ${key}`)
		}
	}

	return result
}

export function modelApiMarkerToJson(name: string, value: Api.Marker): ToJson<Api.Marker> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToJson<Api.Marker> = modelApiMarkerToJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.Marker: ${key}`)
		}
	}

	return result
}

const ApiMarkerInstallPositionKeys: string[] = ['x', 'y', 'z']

function modelApiMarkerInstallPositionFromJsonContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.Marker.InstallPosition {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiMarkerInstallPositionKeys.forEach(k => knownKeys[k] = true)

	const result: Api.Marker.InstallPosition = {
		'x': allowUndefined(numberFromJson)(`${name}.x`, value['x']),
		'y': allowUndefined(numberFromJson)(`${name}.y`, value['y']),
		'z': allowUndefined(numberFromJson)(`${name}.z`, value['z']),
	}

	return result
}

function modelApiMarkerInstallPositionToJsonContent(name: string, value: Api.Marker.InstallPosition, knownKeys: Record<string, boolean> = {}): ToJson<Api.Marker.InstallPosition> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiMarkerInstallPositionKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToJson<Api.Marker.InstallPosition> = {
		'x': allowUndefined(numberToJson)(`${name}.x`, value['x']),
		'y': allowUndefined(numberToJson)(`${name}.y`, value['y']),
		'z': allowUndefined(numberToJson)(`${name}.z`, value['z']),
	}

	return result
}

export function modelApiMarkerInstallPositionFromJson(name: string, value: any): Api.Marker.InstallPosition {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.Marker.InstallPosition = modelApiMarkerInstallPositionFromJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.Marker.InstallPosition: ${key}`)
		}
	}

	return result
}

export function modelApiMarkerInstallPositionToJson(name: string, value: Api.Marker.InstallPosition): ToJson<Api.Marker.InstallPosition> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToJson<Api.Marker.InstallPosition> = modelApiMarkerInstallPositionToJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.Marker.InstallPosition: ${key}`)
		}
	}

	return result
}

const ApiReadingKeys: string[] = ['readingId', 'timestamp', 'temperature', 'porePressure']

function modelApiReadingFromJsonContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.Reading {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiReadingKeys.forEach(k => knownKeys[k] = true)

	const result: Api.Reading = {
		'readingId': allowUndefined(integerFromJson)(`${name}.readingId`, value['readingId']),
		'timestamp': allowUndefined(dateTimeFromJson)(`${name}.timestamp`, value['timestamp']),
		'temperature': allowUndefined(numberFromJson)(`${name}.temperature`, value['temperature']),
		'porePressure': allowUndefined(numberFromJson)(`${name}.porePressure`, value['porePressure']),
	}

	return result
}

function modelApiReadingToJsonContent(name: string, value: Api.Reading, knownKeys: Record<string, boolean> = {}): ToJson<Api.Reading> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiReadingKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToJson<Api.Reading> = {
		'readingId': allowUndefined(integerToJson)(`${name}.readingId`, value['readingId']),
		'timestamp': allowUndefined(dateTimeToJson)(`${name}.timestamp`, value['timestamp']),
		'temperature': allowUndefined(numberToJson)(`${name}.temperature`, value['temperature']),
		'porePressure': allowUndefined(numberToJson)(`${name}.porePressure`, value['porePressure']),
	}

	return result
}

export function modelApiReadingFromJson(name: string, value: any): Api.Reading {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.Reading = modelApiReadingFromJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.Reading: ${key}`)
		}
	}

	return result
}

export function modelApiReadingToJson(name: string, value: Api.Reading): ToJson<Api.Reading> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToJson<Api.Reading> = modelApiReadingToJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.Reading: ${key}`)
		}
	}

	return result
}

const ApiReading2Keys: string[] = ['readingId', 'timestamp', 'temperature', 'porePressure']

function modelApiReading2FromJsonContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.Reading2 {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiReading2Keys.forEach(k => knownKeys[k] = true)

	const result: Api.Reading2 = {
		'readingId': allowUndefined(integerFromJson)(`${name}.readingId`, value['readingId']),
		'timestamp': dateTimeFromJson(`${name}.timestamp`, value['timestamp']),
		'temperature': allowUndefined(numberFromJson)(`${name}.temperature`, value['temperature']),
		'porePressure': allowUndefined(numberFromJson)(`${name}.porePressure`, value['porePressure']),
	}

	return result
}

function modelApiReading2ToJsonContent(name: string, value: Api.Reading2, knownKeys: Record<string, boolean> = {}): ToJson<Api.Reading2> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiReading2Keys.forEach(k => knownKeys[k] = true)
	
	const result: ToJson<Api.Reading2> = {
		'readingId': allowUndefined(integerToJson)(`${name}.readingId`, value['readingId']),
		'timestamp': dateTimeToJson(`${name}.timestamp`, value['timestamp']),
		'temperature': allowUndefined(numberToJson)(`${name}.temperature`, value['temperature']),
		'porePressure': allowUndefined(numberToJson)(`${name}.porePressure`, value['porePressure']),
	}

	return result
}

export function modelApiReading2FromJson(name: string, value: any): Api.Reading2 {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.Reading2 = modelApiReading2FromJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.Reading2: ${key}`)
		}
	}

	return result
}

export function modelApiReading2ToJson(name: string, value: Api.Reading2): ToJson<Api.Reading2> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToJson<Api.Reading2> = modelApiReading2ToJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.Reading2: ${key}`)
		}
	}

	return result
}
